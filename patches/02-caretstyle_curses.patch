diff -r 13067e47a3c3 doc/ScintillaDoc.html
--- a/doc/ScintillaDoc.html	Wed Jun 23 23:19:54 2021 +1000
+++ b/doc/ScintillaDoc.html	Wed Jun 23 12:48:09 2021 -0400
@@ -3737,8 +3737,8 @@
     <p><b id="SCI_SETCARETSTYLE">SCI_SETCARETSTYLE(int caretStyle)</b><br />
      <b id="SCI_GETCARETSTYLE">SCI_GETCARETSTYLE &rarr; int</b><br />
      The style of the caret can be set with <code>SCI_SETCARETSTYLE</code>.
-     There are separate styles for insert mode (lower 4-bits, <code>CARETSTYLE_INS_MASK</code>) and
-     overtype mode (bit 4).
+     There are separate styles for insert mode (lower 4-bits, CARETSTYLE_INS_MASK),
+     overtype mode (bit 4), and curses mode (bit 5).
 
      <table class="standard" summary="Caret Styles">
        <tbody valign="top">
@@ -3768,6 +3768,13 @@
            <td>Draws an overstrike caret as a block. This should be ored with one of the first three styles.</td>
          </tr>
          <tr>
+           <th align="left"><code>CARETSTYLE_CURSES</code></th>
+           <td>32</td>
+           <td>Draws carets that cannot be drawn in a curses (terminal) environment (such as additional carets),
+           and draws them as blocks. The main caret is left to be drawn by the terminal itself. This setting is
+           typically a standalone setting.</td>
+         </tr>
+         <tr>
            <th align="left"><code>CARETSTYLE_BLOCK_AFTER</code></th>
            <td>256</td>
            <td>When the caret end of a range is at the end and a block caret style is chosen, draws the block
diff -r 13067e47a3c3 include/Scintilla.h
--- a/include/Scintilla.h	Wed Jun 23 23:19:54 2021 +1000
+++ b/include/Scintilla.h	Wed Jun 23 12:48:09 2021 -0400
@@ -896,6 +896,7 @@
 #define CARETSTYLE_BLOCK 2
 #define CARETSTYLE_OVERSTRIKE_BAR 0
 #define CARETSTYLE_OVERSTRIKE_BLOCK 0x10
+#define CARETSTYLE_CURSES 0x20
 #define CARETSTYLE_INS_MASK 0xF
 #define CARETSTYLE_BLOCK_AFTER 0x100
 #define SCI_SETCARETSTYLE 2512
diff -r 13067e47a3c3 include/ScintillaTypes.h
--- a/include/ScintillaTypes.h	Wed Jun 23 23:19:54 2021 +1000
+++ b/include/ScintillaTypes.h	Wed Jun 23 12:48:09 2021 -0400
@@ -432,6 +432,7 @@
 	Block = 2,
 	OverstrikeBar = 0,
 	OverstrikeBlock = 0x10,
+	Curses = 0x20,
 	InsMask = 0xF,
 	BlockAfter = 0x100,
 };
diff -r 13067e47a3c3 src/EditView.cxx
--- a/src/EditView.cxx	Wed Jun 23 23:19:54 2021 +1000
+++ b/src/EditView.cxx	Wed Jun 23 12:48:09 2021 -0400
@@ -1628,7 +1628,7 @@
 			}
 			const bool caretBlinkState = (model.caret.active && model.caret.on) || (!additionalCaretsBlink && !mainCaret);
 			const bool caretVisibleState = additionalCaretsVisible || mainCaret;
-			if ((xposCaret >= 0) && vsDraw.IsCaretVisible() &&
+			if ((xposCaret >= 0) && vsDraw.IsCaretVisible(mainCaret) &&
 				(drawDrag || (caretBlinkState && caretVisibleState))) {
 				bool canDrawBlockCaret = true;
 				bool drawBlockCaret = false;
@@ -1652,7 +1652,8 @@
 				if (xposCaret > 0)
 					caretWidthOffset = 0.51f;	// Move back so overlaps both character cells.
 				xposCaret += xStart;
-				const ViewStyle::CaretShape caretShape = drawDrag ? ViewStyle::CaretShape::line : vsDraw.CaretShapeForMode(model.inOverstrike);
+				const ViewStyle::CaretShape caretShape = drawDrag ? ViewStyle::CaretShape::line :
+					vsDraw.CaretShapeForMode(model.inOverstrike, mainCaret);
 				if (drawDrag) {
 					/* Dragging text, use a line caret */
 					rcCaret.left = std::round(xposCaret - caretWidthOffset);
@@ -1725,6 +1726,22 @@
 	}
 }
 
+// On the curses platform, the terminal is drawing its own caret, so if the
+// caret is within the main selection, do not draw the selection at that
+// position.
+// Use iDoc from DrawBackground and DrawForeground here because PositionCache
+// has broken up the line such that, if the caret is inside the main selection,
+// the beginning or end of that selection is at the end of a text segment.
+// This function should only be called if iDoc is within the main selection.
+static InSelection characterInCursesSelection(Sci::Position iDoc, const EditModel &model, const ViewStyle &vsDraw) {
+	const SelectionPosition& posCaret = model.sel.RangeMain().caret;
+	const bool caretAtStart = posCaret < model.sel.RangeMain().anchor && posCaret.Position() == iDoc;
+	const bool caretAtEnd = posCaret > model.sel.RangeMain().anchor &&
+		vsDraw.DrawCaretInsideSelection(false, false) &&
+		model.pdoc->MovePositionOutsideChar(posCaret.Position()-1, -1) == iDoc;
+	return (caretAtStart || caretAtEnd) ? InSelection::inNone : InSelection::inMain;
+}
+
 void EditView::DrawBackground(Surface *surface, const EditModel &model, const ViewStyle &vsDraw, const LineLayout *ll,
 	PRectangle rcLine, Range lineRange, Sci::Position posLineStart, int xStart,
 	int subLine, std::optional<ColourRGBA> background) const {
@@ -1735,7 +1752,7 @@
 	// Does not take margin into account but not significant
 	const XYPOSITION xStartVisible = static_cast<XYPOSITION>(subLineStart-xStart);
 
-	BreakFinder bfBack(ll, &model.sel, lineRange, posLineStart, xStartVisible, selBackDrawn, model.pdoc, &model.reprs, nullptr);
+	BreakFinder bfBack(ll, &model.sel, lineRange, posLineStart, xStartVisible, selBackDrawn, model.pdoc, &model.reprs, &vsDraw);
 
 	const bool drawWhitespaceBackground = vsDraw.WhitespaceBackgroundDrawn() && !background;
 
@@ -1758,7 +1775,9 @@
 			if (rcSegment.right > rcLine.right)
 				rcSegment.right = rcLine.right;
 
-			const InSelection inSelection = hideSelection ? InSelection::inNone : model.sel.CharacterInSelection(iDoc);
+			InSelection inSelection = hideSelection ? InSelection::inNone : model.sel.CharacterInSelection(iDoc);
+			if (vsDraw.IsMainCursesCaret(inSelection == InSelection::inMain))
+				inSelection = characterInCursesSelection(iDoc, model, vsDraw);
 			const bool inHotspot = (ll->hotspot.Valid()) && ll->hotspot.ContainsCharacter(iDoc);
 			ColourRGBA textBack = TextBackground(model, vsDraw, ll, background, inSelection,
 				inHotspot, ll->styles[i], i);
@@ -2002,7 +2021,9 @@
 					}
 				}
 			}
-			const InSelection inSelection = hideSelection ? InSelection::inNone : model.sel.CharacterInSelection(iDoc);
+			InSelection inSelection = hideSelection ? InSelection::inNone : model.sel.CharacterInSelection(iDoc);
+			if (vsDraw.IsMainCursesCaret(inSelection == InSelection::inMain))
+				inSelection = characterInCursesSelection(iDoc, model, vsDraw);
 			const std::optional<ColourRGBA> selectionFore = SelectionForeground(model, vsDraw, inSelection);
 			if (selectionFore) {
 				textFore = *selectionFore;
diff -r 13067e47a3c3 src/PositionCache.cxx
--- a/src/PositionCache.cxx	Wed Jun 23 23:19:54 2021 +1000
+++ b/src/PositionCache.cxx	Wed Jun 23 12:48:09 2021 -0400
@@ -663,10 +663,38 @@
 		for (size_t r=0; r<psel->Count(); r++) {
 			const SelectionSegment portion = psel->Range(r).Intersect(segmentLine);
 			if (!(portion.start == portion.end)) {
-				if (portion.start.IsValid())
-					Insert(portion.start.Position() - posLineStart);
-				if (portion.end.IsValid())
-					Insert(portion.end.Position() - posLineStart);
+				if (portion.start.IsValid()) {
+					const bool skipFirstSelectedCharacter = pvsDraw && pvsDraw->IsMainCursesCaret(r == 0) &&
+						psel->Range(r).caret < psel->Range(r).anchor;
+					if (!skipFirstSelectedCharacter) {
+						Insert(portion.start.Position() - posLineStart);
+					} else {
+						// On the curses platform, the terminal is drawing its own caret, so
+						// make sure the main selection is not drawn on its first character
+						// if the caret is currently on it.
+						// While the caret is still inside the selection, it will be at the
+						// end of this text segment (instead of the beginning of the next
+						// one), so testing against this condition allows it to be drawn
+						// as not selected.
+						const Sci::Position next = pdoc->MovePositionOutsideChar(portion.start.Position()+1, 1);
+						Insert(next - posLineStart);
+					}
+				}
+				if (portion.end.IsValid()) {
+					const bool skipLastSelectedCharacter = pvsDraw && pvsDraw->IsMainCursesCaret(r == 0) &&
+						psel->Range(r).caret > psel->Range(r).anchor && pvsDraw->DrawCaretInsideSelection(false, false);
+					if (!skipLastSelectedCharacter) {
+						Insert(portion.end.Position() - posLineStart);
+					} else {
+						// On the curses platform, the terminal is drawing its own caret, so
+						// make sure the main selection is not drawn on its last character
+						// if the caret is currently on it. The caret will be its own text
+						// segment and at the end of said segment, so testing against this
+						// condition allows it to be drawn as not selected.
+						const Sci::Position prev = pdoc->MovePositionOutsideChar(portion.end.Position()-1, -1);
+						Insert(prev - posLineStart);
+					}
+				}
 			}
 		}
 	}
diff -r 13067e47a3c3 src/ViewStyle.cxx
--- a/src/ViewStyle.cxx	Wed Jun 23 23:19:54 2021 +1000
+++ b/src/ViewStyle.cxx	Wed Jun 23 12:48:09 2021 -0400
@@ -651,11 +651,18 @@
 
 bool ViewStyle::IsBlockCaretStyle() const noexcept {
 	return ((caret.style & CaretStyle::InsMask) == CaretStyle::Block) ||
-		FlagSet(caret.style, CaretStyle::OverstrikeBlock);
+		FlagSet(caret.style, CaretStyle::OverstrikeBlock) ||
+		FlagSet(caret.style, CaretStyle::Curses);
 }
 
-bool ViewStyle::IsCaretVisible() const noexcept {
-	return caret.width > 0 && caret.style != CaretStyle::Invisible;
+bool ViewStyle::IsCaretVisible(bool isMainSelection) const noexcept {
+	return caret.width > 0 &&
+		((caret.style & CaretStyle::InsMask) != CaretStyle::Invisible ||
+		(FlagSet(caret.style, CaretStyle::Curses) && !isMainSelection)); // only draw additional selections in curses mode
+}
+
+bool ViewStyle::IsMainCursesCaret(bool isMainSelection) const noexcept {
+	return isMainSelection && FlagSet(caret.style, CaretStyle::Curses);
 }
 
 bool ViewStyle::DrawCaretInsideSelection(bool inOverstrike, bool imeCaretBlockOverride) const noexcept {
@@ -663,14 +670,19 @@
 		return false;
 	return ((caret.style & CaretStyle::InsMask) == CaretStyle::Block) ||
 		(inOverstrike && FlagSet(caret.style, CaretStyle::OverstrikeBlock)) ||
-		imeCaretBlockOverride;
+		imeCaretBlockOverride ||
+		FlagSet(caret.style, CaretStyle::Curses);
 }
 
-ViewStyle::CaretShape ViewStyle::CaretShapeForMode(bool inOverstrike) const noexcept {
+ViewStyle::CaretShape ViewStyle::CaretShapeForMode(bool inOverstrike, bool isMainSelection) const noexcept {
 	if (inOverstrike) {
 		return (FlagSet(caret.style, CaretStyle::OverstrikeBlock)) ? CaretShape::block : CaretShape::bar;
 	}
 
+	if (FlagSet(caret.style, CaretStyle::Curses) && !isMainSelection) {
+		return CaretShape::block;
+	}
+
 	const CaretStyle caretStyle = caret.style & CaretStyle::InsMask;
 	return (caretStyle <= CaretStyle::Block) ? static_cast<CaretShape>(caretStyle) : CaretShape::line;
 }
diff -r 13067e47a3c3 src/ViewStyle.h
--- a/src/ViewStyle.h	Wed Jun 23 23:19:54 2021 +1000
+++ b/src/ViewStyle.h	Wed Jun 23 12:48:09 2021 -0400
@@ -243,9 +243,10 @@
 
 	enum class CaretShape { invisible, line, block, bar };
 	bool IsBlockCaretStyle() const noexcept;
-	bool IsCaretVisible() const noexcept;
+	bool IsCaretVisible(bool isMainSelection) const noexcept;
+	bool IsMainCursesCaret(bool isMainSelection) const noexcept;
 	bool DrawCaretInsideSelection(bool inOverstrike, bool imeCaretBlockOverride) const noexcept;
-	CaretShape CaretShapeForMode(bool inOverstrike) const noexcept;
+	CaretShape CaretShapeForMode(bool inOverstrike, bool isMainSelection) const noexcept;
 
 private:
 	void AllocStyles(size_t sizeNew);
