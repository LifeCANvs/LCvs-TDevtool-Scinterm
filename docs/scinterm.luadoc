-- Copyright 2012-2020 Mitchell mitchell.att.foicica.com. See LICENSE.
-- This is a DUMMY FILE used for making LuaDoc for the Scinterm API.

---
-- A curses platform for [Scintilla][] that supports curses platforms like
-- [ncurses][].
--
-- [Scintilla]: https://scintilla.org
-- [ncurses]: https://invisible-island.net/ncurses/
module('Scinterm')

---
-- Creates a new Scintilla curses window.
-- @param callback SCNotification callback function of the form:
--   `void callback(Scintilla *, int, void *, void *)`.
-- @param userdata (`void *`) Userdata to pass to *callback*.
-- @return `Scintilla *`
function scintilla_new(callback, userdata) end

---
-- Returns the curses `WINDOW` associated with the given Scintilla window.
-- @param sci The Scintilla window returned by `scintilla_new()`.
-- @return curses `WINDOW`.
function scintilla_get_window(sci) end

---
-- Sends the given message with parameters to the given Scintilla window.
-- @param sci The Scintilla window returned by `scintilla_new()`.
-- @param iMessage (`int`) The Scintilla message ID.
-- @param wParam (`uptr_t`) The first parameter.
-- @param lParam (`sptr_t`) The second parameter.
-- @return `sptr_t`
function scintilla_send_message(sci, iMessage, wParam, lParam) end

---
-- Sends the specified key to the given Scintilla window for processing.
-- If it is not consumed, an SCNotification will be emitted.
-- @param sci The Scintilla window returned by `scintilla_new()`.
-- @param key (`int`) The keycode of the key, or, if Scintilla's code page is
--   UTF-8, the UTF-8 code point of the key.
-- @param shift (`bool`) Flag indicating whether or not the shift modifier key
--   is pressed.
-- @param ctrl (`bool`) Flag indicating whether or not the control modifier key
--   is pressed.
-- @param alt (`bool`) Flag indicating whether or not the alt modifier key is
--   pressed.
-- @return `void`
function scintilla_send_key(sci, key, shift, ctrl, alt) end

---
-- Sends the specified mouse event to the given Scintilla window for processing.
-- @param sci The Scintilla window returned by `scintilla_new()`.
-- @param event (`int`) The mouse event (`SCM_CLICK`, `SCM_DRAG`, or
--   `SCM_RELEASE`).
-- @param time (`unsigned int`) The time in milliseconds of the mouse event.
--   This is only needed if double and triple clicks need to be detected.
-- @param button (`int`) The button number pressed, or `0` if none.
-- @param y (`int`) The absolute y coordinate of the mouse event.
-- @param x (`int`) The absolute x coordinate of the mouse event.
-- @param shift (`bool`) Flag indicating whether or not the shift modifier key
--   is pressed.
-- @param ctrl (`bool`) Flag indicating whether or not the control modifier key
--   is pressed.
-- @param alt (`bool`) Flag indicating whether or not the alt modifier key is
--   pressed.
-- @return `bool` whether or not Scintilla handled the mouse event.
function scintilla_send_mouse(sci, event, time, button, y, x, shift, ctrl, alt) end

---
-- Returns a null-terminated copy of the text on Scintilla's internal clipboard
-- (not the primary and/or secondary X selections) and stores its length in
-- *len*.
-- The caller is responsible for `free`ing the returned text.
-- Keep in mind clipboard text may contain null bytes.
-- @param sci The Scintilla window returned by `scintilla_new()`.
-- @param len (`int *`) The length of the returned text.
-- @return `char *` clipboard text (caller is responsible for `free`ing it)
function scintilla_get_clipboard(sci, len) end

---
-- Refreshes the Scintilla window on the virtual screen.
-- This should be done along with the normal curses `noutrefresh()`.
-- @param sci The Scintilla window returned by `scintilla_new()`.
function scintilla_noutrefresh(sci) end

---
-- Refreshes the Scintilla window on the physical screen.
-- This should be done along with the normal curses `refresh()`.
-- @param sci The Scintilla window returned by `scintilla_new()`.
-- @return `void`
function scintilla_refresh(sci) end

---
-- Deletes the given Scintilla window.
-- @param sci The Scintilla window returned by `scintilla_new()`.
-- @return `void`
function scintilla_delete(sci) end

---
-- [Macro] Returns the curses `COLOR_PAIR` for the given curses foreground and
-- background `COLOR`s.
-- This is used simply to enumerate every possible color combination.
-- @param f (`int`) The curses foreground `COLOR`.
-- @param b (`int`) The curses background `COLOR`.
-- @return `int` number for defining a curses `COLOR_PAIR`.
function SCI_COLOR_PAIR(f, b) end
